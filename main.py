from config import dp, bot
from aiogram import types
import start
import support
import admin
import userfaq
import shop
import usermenu
import review

from aiogram.dispatcher.webhook import get_new_configured_app
from aiohttp import web
import os
import asyncio
import atexit
import ssl
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL") + WEBHOOK_PATH
PORT = int(os.environ.get("PORT", 8080))

# 2. –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_PATH)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
async def handle_root(request):
    logger.info("GET request to root endpoint")
    return web.Response(text="Bot is active!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /webhook
async def handle_webhook(request):
    try:
        update = await request.json()
        await dp.process_update(update)
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"Error processing update: {e}")
        return web.Response(status=500, text="Internal Server Error")

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            await bot.delete_webhook()
            await bot.set_webhook(
                url=WEBHOOK_URL,
                drop_pending_updates=True
            )
            logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
            await asyncio.sleep(5)
    return False

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    await set_webhook()
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞
    asyncio.create_task(webhook_checker())

async def webhook_checker():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞"""
    while True:
        try:
            webhook_info = await bot.get_webhook_info()
            if not webhook_info.url or WEBHOOK_URL not in webhook_info.url:
                logger.warning("‚ö†Ô∏è –í–µ–±—Ö—É–∫ —Å–±—Ä–æ—à–µ–Ω! –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
                await set_webhook()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        await bot.delete_webhook()
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.session.close()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.router.add_get('/', handle_root)
app.router.add_post('/webhook', handle_webhook)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C
    atexit.register(lambda: asyncio.run(on_shutdown(app)))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        loop.run_until_complete(on_shutdown(app))
        loop.close()
